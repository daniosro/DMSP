
// Code generated by stanc v2.24.1
#include <stan/model/model_header.hpp>
namespace michaelis_menten_inference_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 41, column 4 to column 24)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 42, column 4 to column 22)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 43, column 4 to column 25)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 48, column 4 to column 27)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 53, column 4 to column 30)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 49, column 4 to column 21)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 50, column 4 to column 19)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 54, column 4 to column 63)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 74, column 4 to column 27)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 75, column 4 to column 60)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 78, column 4 to column 24)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 80, column 8 to column 53)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 79, column 23 to line 81, column 5)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 79, column 4 to line 81, column 5)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 59, column 4 to column 49)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 60, column 4 to column 43)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 61, column 4 to column 52)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 65, column 15 to column 23)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 65, column 4 to column 25)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 67, column 8 to column 31)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 66, column 25 to line 68, column 5)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 66, column 4 to line 68, column 5)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 69, column 4 to column 31)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 19, column 4 to column 26)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 20, column 18 to column 26)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 20, column 4 to column 28)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 21, column 12 to column 20)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 21, column 4 to column 22)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 22, column 4 to column 17)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 23, column 4 to column 12)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 26, column 4 to column 23)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 27, column 15 to column 20)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 27, column 4 to column 22)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 30, column 4 to column 23)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 31, column 4 to column 21)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 32, column 4 to column 24)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 53, column 20 to column 28)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 53, column 11 to column 12)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 74, column 20 to column 25)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 74, column 11 to column 12)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 78, column 17 to column 22)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 9, column 8 to column 24)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 11, column 8 to column 51)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 13, column 4 to column 17)",
                                                      " (in '/Users/mrazomej/git/DMSP/code/analysis/stan_files/michaelis_menten_inference.stan', line 7, column 6 to line 14, column 5)"};


template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__,
T2__>, -1, 1>
enzyme_kinetics(const T0__& t, const Eigen::Matrix<T1__, -1, 1>& s,
                const std::vector<T2__>& theta, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> ds_dt;
    ds_dt = Eigen::Matrix<local_scalar_t__, -1, 1>(1);
    stan::math::fill(ds_dt, DUMMY_VAR__);
    
    current_statement__ = 43;
    assign(ds_dt, nil_index_list(),
      divide(multiply(-theta[(1 - 1)], s), (theta[(2 - 1)] + s[(1 - 1)])),
      "assigning variable ds_dt");
    current_statement__ = 44;
    return ds_dt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct enzyme_kinetics_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__,
T2__>, -1, 1>
operator()(const T0__& t, const Eigen::Matrix<T1__, -1, 1>& s,
           const std::vector<T2__>& theta, std::ostream* pstream__)  const 
{
return enzyme_kinetics(t, s, theta, pstream__);
}
};


struct enzyme_kinetics_odefunctor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__,
T2__>, -1, 1>
operator()(const T0__& t, const Eigen::Matrix<T1__, -1, 1>& s,
           std::ostream* pstream__, const std::vector<T2__>& theta)  const 
{
return enzyme_kinetics(t, s, theta, pstream__);
}
};

class michaelis_menten_inference_model final : public model_base_crtp<michaelis_menten_inference_model> {

 private:
  int n_sample;
  std::vector<double> t_sample;
  std::vector<double> s_;
  Eigen::Matrix<double, -1, 1> s0;
  double t0;
  int n_sim;
  std::vector<double> t_sim;
  std::vector<double> vmax_param;
  std::vector<double> km_param;
  std::vector<double> sigma_param;
 
 public:
  ~michaelis_menten_inference_model() final { }
  
  std::string model_name() const final { return "michaelis_menten_inference_model"; }

  std::vector<std::string> model_compile_info() const {
    std::vector<std::string> stanc_info;
    stanc_info.push_back("stanc_version = stanc3 v2.24.1");
    stanc_info.push_back("stancflags = ");
    return stanc_info;
  }
  
  
  michaelis_menten_inference_model(stan::io::var_context& context__,
                                   unsigned int random_seed__ = 0,
                                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "michaelis_menten_inference_model_namespace::michaelis_menten_inference_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 24;
      context__.validate_dims("data initialization","n_sample","int",
          context__.to_vec());
      n_sample = std::numeric_limits<int>::min();
      
      current_statement__ = 24;
      n_sample = context__.vals_i("n_sample")[(1 - 1)];
      current_statement__ = 24;
      current_statement__ = 24;
      check_greater_or_equal(function__, "n_sample", n_sample, 1);
      current_statement__ = 25;
      validate_non_negative_index("t_sample", "n_sample", n_sample);
      current_statement__ = 26;
      context__.validate_dims("data initialization","t_sample","double",
          context__.to_vec(n_sample));
      t_sample = std::vector<double>(n_sample, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 26;
      assign(t_sample, nil_index_list(), context__.vals_r("t_sample"),
        "assigning variable t_sample");
      current_statement__ = 27;
      validate_non_negative_index("s_", "n_sample", n_sample);
      current_statement__ = 28;
      context__.validate_dims("data initialization","s_","double",
          context__.to_vec(n_sample));
      s_ = std::vector<double>(n_sample, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 28;
      assign(s_, nil_index_list(), context__.vals_r("s_"),
        "assigning variable s_");
      current_statement__ = 29;
      context__.validate_dims("data initialization","s0","double",
          context__.to_vec(1));
      s0 = Eigen::Matrix<double, -1, 1>(1);
      stan::math::fill(s0, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> s0_flat__;
        current_statement__ = 29;
        assign(s0_flat__, nil_index_list(), context__.vals_r("s0"),
          "assigning variable s0_flat__");
        current_statement__ = 29;
        pos__ = 1;
        current_statement__ = 29;
        for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
          current_statement__ = 29;
          assign(s0, cons_list(index_uni(sym1__), nil_index_list()),
            s0_flat__[(pos__ - 1)], "assigning variable s0");
          current_statement__ = 29;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 30;
      context__.validate_dims("data initialization","t0","double",
          context__.to_vec());
      t0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 30;
      t0 = context__.vals_r("t0")[(1 - 1)];
      current_statement__ = 31;
      context__.validate_dims("data initialization","n_sim","int",
          context__.to_vec());
      n_sim = std::numeric_limits<int>::min();
      
      current_statement__ = 31;
      n_sim = context__.vals_i("n_sim")[(1 - 1)];
      current_statement__ = 31;
      current_statement__ = 31;
      check_greater_or_equal(function__, "n_sim", n_sim, 1);
      current_statement__ = 32;
      validate_non_negative_index("t_sim", "n_sim", n_sim);
      current_statement__ = 33;
      context__.validate_dims("data initialization","t_sim","double",
          context__.to_vec(n_sim));
      t_sim = std::vector<double>(n_sim, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 33;
      assign(t_sim, nil_index_list(), context__.vals_r("t_sim"),
        "assigning variable t_sim");
      current_statement__ = 34;
      context__.validate_dims("data initialization","vmax_param","double",
          context__.to_vec(2));
      vmax_param = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 34;
      assign(vmax_param, nil_index_list(), context__.vals_r("vmax_param"),
        "assigning variable vmax_param");
      current_statement__ = 35;
      context__.validate_dims("data initialization","km_param","double",
          context__.to_vec(2));
      km_param = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 35;
      assign(km_param, nil_index_list(), context__.vals_r("km_param"),
        "assigning variable km_param");
      current_statement__ = 36;
      context__.validate_dims("data initialization","sigma_param","double",
          context__.to_vec(2));
      sigma_param = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 36;
      assign(sigma_param, nil_index_list(), context__.vals_r("sigma_param"),
        "assigning variable sigma_param");
      current_statement__ = 37;
      validate_non_negative_index("s_hat", "n_sample", n_sample);
      current_statement__ = 38;
      validate_non_negative_index("s_hat", "1", 1);
      current_statement__ = 39;
      validate_non_negative_index("s_sim", "n_sim", n_sim);
      current_statement__ = 40;
      validate_non_negative_index("s_sim", "1", 1);
      current_statement__ = 41;
      validate_non_negative_index("s_tilde", "n_sim", n_sim);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  inline T__ log_prob(std::vector<T__>& params_r__,
                      std::vector<int>& params_i__,
                      std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "michaelis_menten_inference_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ vmax_;
      vmax_ = DUMMY_VAR__;
      
      current_statement__ = 1;
      vmax_ = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        vmax_ = stan::math::lb_constrain(vmax_, 0, lp__);
      } else {
        current_statement__ = 1;
        vmax_ = stan::math::lb_constrain(vmax_, 0);
      }
      local_scalar_t__ km_;
      km_ = DUMMY_VAR__;
      
      current_statement__ = 2;
      km_ = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        km_ = stan::math::lb_constrain(km_, 0, lp__);
      } else {
        current_statement__ = 2;
        km_ = stan::math::lb_constrain(km_, 0);
      }
      local_scalar_t__ sigma_;
      sigma_ = DUMMY_VAR__;
      
      current_statement__ = 3;
      sigma_ = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        sigma_ = stan::math::lb_constrain(sigma_, 0, lp__);
      } else {
        current_statement__ = 3;
        sigma_ = stan::math::lb_constrain(sigma_, 0);
      }
      std::vector<local_scalar_t__> theta;
      theta = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
      
      current_statement__ = 6;
      assign(theta, cons_list(index_uni(1), nil_index_list()), vmax_,
        "assigning variable theta");
      current_statement__ = 7;
      assign(theta, cons_list(index_uni(2), nil_index_list()), km_,
        "assigning variable theta");
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> s_hat;
      s_hat = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_sample, Eigen::Matrix<local_scalar_t__, -1, 1>(1));
      stan::math::fill(s_hat, DUMMY_VAR__);
      
      current_statement__ = 8;
      assign(s_hat, nil_index_list(),
        ode_rk45(enzyme_kinetics_odefunctor__(), s0, t0, t_sample, pstream__,
          theta), "assigning variable s_hat");
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 4;
        current_statement__ = 4;
        check_greater_or_equal(function__, "theta[sym1__]",
                               theta[(sym1__ - 1)], 0);}
      {
        current_statement__ = 15;
        lp_accum__.add(
          normal_lpdf<propto__>(vmax_, vmax_param[(1 - 1)],
            vmax_param[(2 - 1)]));
        current_statement__ = 16;
        lp_accum__.add(
          normal_lpdf<propto__>(km_, km_param[(1 - 1)], km_param[(2 - 1)]));
        current_statement__ = 17;
        lp_accum__.add(
          normal_lpdf<propto__>(sigma_, sigma_param[(1 - 1)],
            sigma_param[(2 - 1)]));
        current_statement__ = 18;
        validate_non_negative_index("s_int", "n_sample", n_sample);
        std::vector<local_scalar_t__> s_int;
        s_int = std::vector<local_scalar_t__>(n_sample, DUMMY_VAR__);
        
        current_statement__ = 22;
        for (int i = 1; i <= n_sample; ++i) {
          current_statement__ = 20;
          assign(s_int, cons_list(index_uni(i), nil_index_list()),
            s_hat[(i - 1)][(1 - 1)], "assigning variable s_int");}
        current_statement__ = 23;
        lp_accum__.add(normal_lpdf<propto__>(s_, s_int, sigma_));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  inline void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                          std::vector<int>& params_i__,
                          std::vector<double>& vars__,
                          bool emit_transformed_parameters__ = true,
                          bool emit_generated_quantities__ = true,
                          std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "michaelis_menten_inference_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double vmax_;
      vmax_ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      vmax_ = in__.scalar();
      current_statement__ = 1;
      vmax_ = stan::math::lb_constrain(vmax_, 0);
      double km_;
      km_ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      km_ = in__.scalar();
      current_statement__ = 2;
      km_ = stan::math::lb_constrain(km_, 0);
      double sigma_;
      sigma_ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sigma_ = in__.scalar();
      current_statement__ = 3;
      sigma_ = stan::math::lb_constrain(sigma_, 0);
      std::vector<double> theta;
      theta = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> s_hat;
      s_hat = std::vector<Eigen::Matrix<double, -1, 1>>(n_sample, Eigen::Matrix<double, -1, 1>(1));
      stan::math::fill(s_hat, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(vmax_);
      vars__.emplace_back(km_);
      vars__.emplace_back(sigma_);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 6;
      assign(theta, cons_list(index_uni(1), nil_index_list()), vmax_,
        "assigning variable theta");
      current_statement__ = 7;
      assign(theta, cons_list(index_uni(2), nil_index_list()), km_,
        "assigning variable theta");
      current_statement__ = 8;
      assign(s_hat, nil_index_list(),
        ode_rk45(enzyme_kinetics_odefunctor__(), s0, t0, t_sample, pstream__,
          theta), "assigning variable s_hat");
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 4;
        current_statement__ = 4;
        check_greater_or_equal(function__, "theta[sym1__]",
                               theta[(sym1__ - 1)], 0);}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          vars__.emplace_back(theta[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_sample; ++sym2__) {
            vars__.emplace_back(s_hat[(sym2__ - 1)][(sym1__ - 1)]);}}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<Eigen::Matrix<double, -1, 1>> s_sim;
      s_sim = std::vector<Eigen::Matrix<double, -1, 1>>(n_sim, Eigen::Matrix<double, -1, 1>(1));
      stan::math::fill(s_sim, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      assign(s_sim, nil_index_list(),
        ode_rk45(enzyme_kinetics_odefunctor__(), s0, t0, t_sim, pstream__,
          theta), "assigning variable s_sim");
      std::vector<double> s_tilde;
      s_tilde = std::vector<double>(n_sim, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 14;
      for (int i = 1; i <= n_sim; ++i) {
        current_statement__ = 12;
        assign(s_tilde, cons_list(index_uni(i), nil_index_list()),
          normal_rng(s_sim[(i - 1)][(1 - 1)], sigma_, base_rng__),
          "assigning variable s_tilde");}
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_sim; ++sym2__) {
          vars__.emplace_back(s_sim[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= n_sim; ++sym1__) {
        vars__.emplace_back(s_tilde[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  inline void transform_inits(const stan::io::var_context& context__,
                              std::vector<int>& params_i__,
                              std::vector<double>& vars__,
                              std::ostream* pstream__) const
    final {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double vmax_;
      vmax_ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      vmax_ = context__.vals_r("vmax_")[(1 - 1)];
      current_statement__ = 1;
      vmax_ = stan::math::lb_free(vmax_, 0);
      double km_;
      km_ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      km_ = context__.vals_r("km_")[(1 - 1)];
      current_statement__ = 2;
      km_ = stan::math::lb_free(km_, 0);
      double sigma_;
      sigma_ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sigma_ = context__.vals_r("sigma_")[(1 - 1)];
      current_statement__ = 3;
      sigma_ = stan::math::lb_free(sigma_, 0);
      vars__.emplace_back(vmax_);
      vars__.emplace_back(km_);
      vars__.emplace_back(sigma_);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("vmax_");
    names__.emplace_back("km_");
    names__.emplace_back("sigma_");
    names__.emplace_back("theta");
    names__.emplace_back("s_hat");
    names__.emplace_back("s_sim");
    names__.emplace_back("s_tilde");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const
    final {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_sample),
                                             static_cast<size_t>(1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_sim),
                                             static_cast<size_t>(1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_sim)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "vmax_");
    param_names__.emplace_back(std::string() + "km_");
    param_names__.emplace_back(std::string() + "sigma_");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_sample; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "s_hat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_sim; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "s_sim" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n_sim; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "s_tilde" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "vmax_");
    param_names__.emplace_back(std::string() + "km_");
    param_names__.emplace_back(std::string() + "sigma_");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_sample; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "s_hat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_sim; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "s_sim" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n_sim; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "s_tilde" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"vmax_\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"km_\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"s_hat\",\"type\":{\"name\":\"array\",\"length\":" << n_sample << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 1 << "}},\"block\":\"transformed_parameters\"},{\"name\":\"s_sim\",\"type\":{\"name\":\"array\",\"length\":" << n_sim << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 1 << "}},\"block\":\"generated_quantities\"},{\"name\":\"s_tilde\",\"type\":{\"name\":\"array\",\"length\":" << n_sim << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"vmax_\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"km_\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"s_hat\",\"type\":{\"name\":\"array\",\"length\":" << n_sample << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 1 << "}},\"block\":\"transformed_parameters\"},{\"name\":\"s_sim\",\"type\":{\"name\":\"array\",\"length\":" << n_sim << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 1 << "}},\"block\":\"generated_quantities\"},{\"name\":\"s_tilde\",\"type\":{\"name\":\"array\",\"length\":" << n_sim << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = nullptr) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = nullptr) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__ = nullptr) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}

using stan_model = michaelis_menten_inference_model_namespace::michaelis_menten_inference_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


